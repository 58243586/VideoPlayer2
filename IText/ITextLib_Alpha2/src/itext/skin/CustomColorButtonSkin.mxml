<?xml version="1.0" encoding="utf-8"?>

<!--

     ADOBE SYSTEMS INCORPORATED
     Copyright 2008 Adobe Systems Incorporated
     All Rights Reserved.

     NOTICE: Adobe permits you to use, modify, and distribute this file
     in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.

     @see spark.components.Button

     @langversion 3.0
     @playerversion Flash 10
     @playerversion AIR 1.5
     @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21"
             minHeight="21"
             alpha.disabled="0.5"
             xmlns:mx="library://ns.adobe.com/flex/mx">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[
			import mx.events.FlexEvent;
            
			private var textBox:TextBoxColorBtnDO = new TextBoxColorBtnDO();
			
			private var over:MouseUpSkin = new MouseUpSkin();
			
			private var down:MouseDownSkin = new MouseDownSkin();
			
			protected function buttonDO_creationCompleteHandler(event:FlexEvent):void
			{
				buttonDO.addChild(textBox);
				buttonDO.width = textBox.width;
				buttonDO.height = textBox.height;
            }
			
			public function set color(value:uint):void
			{
				var ctf:ColorTransform = new ColorTransform();
				ctf.color = value;
				textBox.colorBlock.transform.colorTransform = ctf;
			}
			
			private function resizeMouseSkin():void
			{
				over.width = this.width;
				over.height = this.height;
				down.width = this.width;
				down.height = this.height;
			}
			
			protected function enterStateHandler(event:FlexEvent):void
			{
				switch (this.currentState.toString())
				{
					case "over":
						resizeMouseSkin();
						skinUI.addChild(over);
						break;
					case "down":
						resizeMouseSkin();
						skinUI.addChild(down);
						break;
				}
			}
			
			protected function exitStateHandler(event:FlexEvent):void
			{
				switch (this.currentState.toString())
				{
					case "over":
						skinUI.removeChild(over);
						break;
					case "down":
						skinUI.removeChild(down);
						break;
				}
			}
        ]]>
    </fx:Script>
	<fx:Declarations>
		<s:SolidColor id="fillColor"
					  color="#FFFFFF"
					  color.over="#DDDDDD"
					  color.down="#FF0000" />
		<s:SolidColorStroke id="strokeColor"
							color="#333333"
							color.over="#111111"
							weight="2" />
	</fx:Declarations>
	<s:states>
		<s:State name="up" />
		<s:State name="over"
				 enterState="enterStateHandler(event)"
				 exitState="exitStateHandler(event)" />
		<s:State name="down"
				 enterState="enterStateHandler(event)"
				 exitState="exitStateHandler(event)" />
		<s:State name="disabled" />
	</s:states>
	
	<mx:UIComponent id="skinUI" />

    <s:HGroup id="skinHGroup"
              gap="2"
              paddingLeft="10"
              paddingRight="10"
              paddingTop="5"
              paddingBottom="5"
              verticalAlign="middle">
        <fx:Script>
            <![CDATA[
                import itext.framework.IconFactory;
            ]]>
        </fx:Script>
        <mx:UIComponent id="buttonDO"
                        verticalCenter.up="0"
                        horizontalCenter.up="0"
                        creationComplete="buttonDO_creationCompleteHandler(event)" />
        <s:Label id="labelDisplay"
                 paddingLeft="2"
                 top="9"
                 bottom="6" />
        <s:BitmapImage id="arrow"
                       source="{IconFactory.ICO_ARROW}" />
    </s:HGroup>

</s:SparkSkin>
